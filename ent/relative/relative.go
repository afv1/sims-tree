// Code generated by ent, DO NOT EDIT.

package relative

const (
	// Label holds the string label denoting the relative type in the database.
	Label = "relative"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldAvatarResource holds the string denoting the avatar_resource field in the database.
	FieldAvatarResource = "avatar_resource"
	// EdgeFamilies holds the string denoting the families edge name in mutations.
	EdgeFamilies = "families"
	// Table holds the table name of the relative in the database.
	Table = "relatives"
	// FamiliesTable is the table that holds the families relation/edge.
	FamiliesTable = "relatives"
	// FamiliesInverseTable is the table name for the Family entity.
	// It exists in this package in order to avoid circular dependency with the "family" package.
	FamiliesInverseTable = "families"
	// FamiliesColumn is the table column denoting the families relation/edge.
	FamiliesColumn = "family_relatives"
)

// Columns holds all SQL columns for relative fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldAvatarResource,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "relatives"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"family_relatives",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)
