// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/afv1/sims-tree/ent/family"
	"github.com/afv1/sims-tree/ent/relative"
)

// RelativeCreate is the builder for creating a Relative entity.
type RelativeCreate struct {
	config
	mutation *RelativeMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (rc *RelativeCreate) SetName(s string) *RelativeCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetDescription sets the "description" field.
func (rc *RelativeCreate) SetDescription(s string) *RelativeCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetAvatarResource sets the "avatar_resource" field.
func (rc *RelativeCreate) SetAvatarResource(s string) *RelativeCreate {
	rc.mutation.SetAvatarResource(s)
	return rc
}

// SetFamiliesID sets the "families" edge to the Family entity by ID.
func (rc *RelativeCreate) SetFamiliesID(id int) *RelativeCreate {
	rc.mutation.SetFamiliesID(id)
	return rc
}

// SetNillableFamiliesID sets the "families" edge to the Family entity by ID if the given value is not nil.
func (rc *RelativeCreate) SetNillableFamiliesID(id *int) *RelativeCreate {
	if id != nil {
		rc = rc.SetFamiliesID(*id)
	}
	return rc
}

// SetFamilies sets the "families" edge to the Family entity.
func (rc *RelativeCreate) SetFamilies(f *Family) *RelativeCreate {
	return rc.SetFamiliesID(f.ID)
}

// Mutation returns the RelativeMutation object of the builder.
func (rc *RelativeCreate) Mutation() *RelativeMutation {
	return rc.mutation
}

// Save creates the Relative in the database.
func (rc *RelativeCreate) Save(ctx context.Context) (*Relative, error) {
	var (
		err  error
		node *Relative
	)
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RelativeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Relative)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RelativeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RelativeCreate) SaveX(ctx context.Context) *Relative {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RelativeCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RelativeCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RelativeCreate) check() error {
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Relative.name"`)}
	}
	if v, ok := rc.mutation.Name(); ok {
		if err := relative.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Relative.name": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Relative.description"`)}
	}
	if _, ok := rc.mutation.AvatarResource(); !ok {
		return &ValidationError{Name: "avatar_resource", err: errors.New(`ent: missing required field "Relative.avatar_resource"`)}
	}
	return nil
}

func (rc *RelativeCreate) sqlSave(ctx context.Context) (*Relative, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rc *RelativeCreate) createSpec() (*Relative, *sqlgraph.CreateSpec) {
	var (
		_node = &Relative{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: relative.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: relative.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(relative.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.SetField(relative.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := rc.mutation.AvatarResource(); ok {
		_spec.SetField(relative.FieldAvatarResource, field.TypeString, value)
		_node.AvatarResource = &value
	}
	if nodes := rc.mutation.FamiliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   relative.FamiliesTable,
			Columns: []string{relative.FamiliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: family.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.family_relatives = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RelativeCreateBulk is the builder for creating many Relative entities in bulk.
type RelativeCreateBulk struct {
	config
	builders []*RelativeCreate
}

// Save creates the Relative entities in the database.
func (rcb *RelativeCreateBulk) Save(ctx context.Context) ([]*Relative, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Relative, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RelativeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RelativeCreateBulk) SaveX(ctx context.Context) []*Relative {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RelativeCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RelativeCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
