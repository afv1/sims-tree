// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/afv1/sims-tree/ent/family"
	"github.com/afv1/sims-tree/ent/user"
)

// Family is the model entity for the Family schema.
type Family struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Surname holds the value of the "surname" field.
	Surname string `json:"surname,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// LogoResource holds the value of the "logo_resource" field.
	LogoResource *string `json:"logo_resource,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FamilyQuery when eager-loading is set.
	Edges         FamilyEdges `json:"edges"`
	user_families *int
}

// FamilyEdges holds the relations/edges for other nodes in the graph.
type FamilyEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Relatives holds the value of the relatives edge.
	Relatives []*Relative `json:"relatives,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FamilyEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// RelativesOrErr returns the Relatives value or an error if the edge
// was not loaded in eager-loading.
func (e FamilyEdges) RelativesOrErr() ([]*Relative, error) {
	if e.loadedTypes[1] {
		return e.Relatives, nil
	}
	return nil, &NotLoadedError{edge: "relatives"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Family) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case family.FieldID:
			values[i] = new(sql.NullInt64)
		case family.FieldSurname, family.FieldDescription, family.FieldLogoResource:
			values[i] = new(sql.NullString)
		case family.ForeignKeys[0]: // user_families
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Family", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Family fields.
func (f *Family) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case family.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case family.FieldSurname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field surname", values[i])
			} else if value.Valid {
				f.Surname = value.String
			}
		case family.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				f.Description = value.String
			}
		case family.FieldLogoResource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_resource", values[i])
			} else if value.Valid {
				f.LogoResource = new(string)
				*f.LogoResource = value.String
			}
		case family.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_families", value)
			} else if value.Valid {
				f.user_families = new(int)
				*f.user_families = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the Family entity.
func (f *Family) QueryOwner() *UserQuery {
	return (&FamilyClient{config: f.config}).QueryOwner(f)
}

// QueryRelatives queries the "relatives" edge of the Family entity.
func (f *Family) QueryRelatives() *RelativeQuery {
	return (&FamilyClient{config: f.config}).QueryRelatives(f)
}

// Update returns a builder for updating this Family.
// Note that you need to call Family.Unwrap() before calling this method if this Family
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Family) Update() *FamilyUpdateOne {
	return (&FamilyClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Family entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Family) Unwrap() *Family {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Family is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Family) String() string {
	var builder strings.Builder
	builder.WriteString("Family(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("surname=")
	builder.WriteString(f.Surname)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(f.Description)
	builder.WriteString(", ")
	if v := f.LogoResource; v != nil {
		builder.WriteString("logo_resource=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Families is a parsable slice of Family.
type Families []*Family

func (f Families) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
