// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/afv1/sims-tree/ent/family"
	"github.com/afv1/sims-tree/ent/relative"
)

// Relative is the model entity for the Relative schema.
type Relative struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// AvatarResource holds the value of the "avatar_resource" field.
	AvatarResource *string `json:"avatar_resource,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RelativeQuery when eager-loading is set.
	Edges            RelativeEdges `json:"edges"`
	family_relatives *int
}

// RelativeEdges holds the relations/edges for other nodes in the graph.
type RelativeEdges struct {
	// Families holds the value of the families edge.
	Families *Family `json:"families,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FamiliesOrErr returns the Families value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RelativeEdges) FamiliesOrErr() (*Family, error) {
	if e.loadedTypes[0] {
		if e.Families == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: family.Label}
		}
		return e.Families, nil
	}
	return nil, &NotLoadedError{edge: "families"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Relative) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case relative.FieldID:
			values[i] = new(sql.NullInt64)
		case relative.FieldName, relative.FieldDescription, relative.FieldAvatarResource:
			values[i] = new(sql.NullString)
		case relative.ForeignKeys[0]: // family_relatives
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Relative", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Relative fields.
func (r *Relative) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case relative.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case relative.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case relative.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = new(string)
				*r.Description = value.String
			}
		case relative.FieldAvatarResource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_resource", values[i])
			} else if value.Valid {
				r.AvatarResource = new(string)
				*r.AvatarResource = value.String
			}
		case relative.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field family_relatives", value)
			} else if value.Valid {
				r.family_relatives = new(int)
				*r.family_relatives = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryFamilies queries the "families" edge of the Relative entity.
func (r *Relative) QueryFamilies() *FamilyQuery {
	return (&RelativeClient{config: r.config}).QueryFamilies(r)
}

// Update returns a builder for updating this Relative.
// Note that you need to call Relative.Unwrap() before calling this method if this Relative
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Relative) Update() *RelativeUpdateOne {
	return (&RelativeClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Relative entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Relative) Unwrap() *Relative {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Relative is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Relative) String() string {
	var builder strings.Builder
	builder.WriteString("Relative(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	if v := r.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := r.AvatarResource; v != nil {
		builder.WriteString("avatar_resource=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Relatives is a parsable slice of Relative.
type Relatives []*Relative

func (r Relatives) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
