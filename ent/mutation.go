// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/afv1/sims-tree/ent/family"
	"github.com/afv1/sims-tree/ent/predicate"
	"github.com/afv1/sims-tree/ent/relative"
	"github.com/afv1/sims-tree/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFamily   = "Family"
	TypeRelative = "Relative"
	TypeUser     = "User"
)

// FamilyMutation represents an operation that mutates the Family nodes in the graph.
type FamilyMutation struct {
	config
	op               Op
	typ              string
	id               *int
	surname          *string
	description      *string
	logo_resource    *string
	clearedFields    map[string]struct{}
	owner            *int
	clearedowner     bool
	relatives        map[int]struct{}
	removedrelatives map[int]struct{}
	clearedrelatives bool
	done             bool
	oldValue         func(context.Context) (*Family, error)
	predicates       []predicate.Family
}

var _ ent.Mutation = (*FamilyMutation)(nil)

// familyOption allows management of the mutation configuration using functional options.
type familyOption func(*FamilyMutation)

// newFamilyMutation creates new mutation for the Family entity.
func newFamilyMutation(c config, op Op, opts ...familyOption) *FamilyMutation {
	m := &FamilyMutation{
		config:        c,
		op:            op,
		typ:           TypeFamily,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFamilyID sets the ID field of the mutation.
func withFamilyID(id int) familyOption {
	return func(m *FamilyMutation) {
		var (
			err   error
			once  sync.Once
			value *Family
		)
		m.oldValue = func(ctx context.Context) (*Family, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Family.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFamily sets the old Family of the mutation.
func withFamily(node *Family) familyOption {
	return func(m *FamilyMutation) {
		m.oldValue = func(context.Context) (*Family, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FamilyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FamilyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FamilyMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FamilyMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Family.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSurname sets the "surname" field.
func (m *FamilyMutation) SetSurname(s string) {
	m.surname = &s
}

// Surname returns the value of the "surname" field in the mutation.
func (m *FamilyMutation) Surname() (r string, exists bool) {
	v := m.surname
	if v == nil {
		return
	}
	return *v, true
}

// OldSurname returns the old "surname" field's value of the Family entity.
// If the Family object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FamilyMutation) OldSurname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSurname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSurname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSurname: %w", err)
	}
	return oldValue.Surname, nil
}

// ResetSurname resets all changes to the "surname" field.
func (m *FamilyMutation) ResetSurname() {
	m.surname = nil
}

// SetDescription sets the "description" field.
func (m *FamilyMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *FamilyMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Family entity.
// If the Family object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FamilyMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *FamilyMutation) ResetDescription() {
	m.description = nil
}

// SetLogoResource sets the "logo_resource" field.
func (m *FamilyMutation) SetLogoResource(s string) {
	m.logo_resource = &s
}

// LogoResource returns the value of the "logo_resource" field in the mutation.
func (m *FamilyMutation) LogoResource() (r string, exists bool) {
	v := m.logo_resource
	if v == nil {
		return
	}
	return *v, true
}

// OldLogoResource returns the old "logo_resource" field's value of the Family entity.
// If the Family object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FamilyMutation) OldLogoResource(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogoResource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogoResource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogoResource: %w", err)
	}
	return oldValue.LogoResource, nil
}

// ResetLogoResource resets all changes to the "logo_resource" field.
func (m *FamilyMutation) ResetLogoResource() {
	m.logo_resource = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *FamilyMutation) SetOwnerID(id int) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *FamilyMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *FamilyMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *FamilyMutation) OwnerID() (id int, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *FamilyMutation) OwnerIDs() (ids []int) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *FamilyMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddRelativeIDs adds the "relatives" edge to the Relative entity by ids.
func (m *FamilyMutation) AddRelativeIDs(ids ...int) {
	if m.relatives == nil {
		m.relatives = make(map[int]struct{})
	}
	for i := range ids {
		m.relatives[ids[i]] = struct{}{}
	}
}

// ClearRelatives clears the "relatives" edge to the Relative entity.
func (m *FamilyMutation) ClearRelatives() {
	m.clearedrelatives = true
}

// RelativesCleared reports if the "relatives" edge to the Relative entity was cleared.
func (m *FamilyMutation) RelativesCleared() bool {
	return m.clearedrelatives
}

// RemoveRelativeIDs removes the "relatives" edge to the Relative entity by IDs.
func (m *FamilyMutation) RemoveRelativeIDs(ids ...int) {
	if m.removedrelatives == nil {
		m.removedrelatives = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.relatives, ids[i])
		m.removedrelatives[ids[i]] = struct{}{}
	}
}

// RemovedRelatives returns the removed IDs of the "relatives" edge to the Relative entity.
func (m *FamilyMutation) RemovedRelativesIDs() (ids []int) {
	for id := range m.removedrelatives {
		ids = append(ids, id)
	}
	return
}

// RelativesIDs returns the "relatives" edge IDs in the mutation.
func (m *FamilyMutation) RelativesIDs() (ids []int) {
	for id := range m.relatives {
		ids = append(ids, id)
	}
	return
}

// ResetRelatives resets all changes to the "relatives" edge.
func (m *FamilyMutation) ResetRelatives() {
	m.relatives = nil
	m.clearedrelatives = false
	m.removedrelatives = nil
}

// Where appends a list predicates to the FamilyMutation builder.
func (m *FamilyMutation) Where(ps ...predicate.Family) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *FamilyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Family).
func (m *FamilyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FamilyMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.surname != nil {
		fields = append(fields, family.FieldSurname)
	}
	if m.description != nil {
		fields = append(fields, family.FieldDescription)
	}
	if m.logo_resource != nil {
		fields = append(fields, family.FieldLogoResource)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FamilyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case family.FieldSurname:
		return m.Surname()
	case family.FieldDescription:
		return m.Description()
	case family.FieldLogoResource:
		return m.LogoResource()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FamilyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case family.FieldSurname:
		return m.OldSurname(ctx)
	case family.FieldDescription:
		return m.OldDescription(ctx)
	case family.FieldLogoResource:
		return m.OldLogoResource(ctx)
	}
	return nil, fmt.Errorf("unknown Family field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FamilyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case family.FieldSurname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSurname(v)
		return nil
	case family.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case family.FieldLogoResource:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogoResource(v)
		return nil
	}
	return fmt.Errorf("unknown Family field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FamilyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FamilyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FamilyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Family numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FamilyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FamilyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FamilyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Family nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FamilyMutation) ResetField(name string) error {
	switch name {
	case family.FieldSurname:
		m.ResetSurname()
		return nil
	case family.FieldDescription:
		m.ResetDescription()
		return nil
	case family.FieldLogoResource:
		m.ResetLogoResource()
		return nil
	}
	return fmt.Errorf("unknown Family field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FamilyMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.owner != nil {
		edges = append(edges, family.EdgeOwner)
	}
	if m.relatives != nil {
		edges = append(edges, family.EdgeRelatives)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FamilyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case family.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case family.EdgeRelatives:
		ids := make([]ent.Value, 0, len(m.relatives))
		for id := range m.relatives {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FamilyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedrelatives != nil {
		edges = append(edges, family.EdgeRelatives)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FamilyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case family.EdgeRelatives:
		ids := make([]ent.Value, 0, len(m.removedrelatives))
		for id := range m.removedrelatives {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FamilyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedowner {
		edges = append(edges, family.EdgeOwner)
	}
	if m.clearedrelatives {
		edges = append(edges, family.EdgeRelatives)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FamilyMutation) EdgeCleared(name string) bool {
	switch name {
	case family.EdgeOwner:
		return m.clearedowner
	case family.EdgeRelatives:
		return m.clearedrelatives
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FamilyMutation) ClearEdge(name string) error {
	switch name {
	case family.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Family unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FamilyMutation) ResetEdge(name string) error {
	switch name {
	case family.EdgeOwner:
		m.ResetOwner()
		return nil
	case family.EdgeRelatives:
		m.ResetRelatives()
		return nil
	}
	return fmt.Errorf("unknown Family edge %s", name)
}

// RelativeMutation represents an operation that mutates the Relative nodes in the graph.
type RelativeMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	description     *string
	avatar_resource *string
	clearedFields   map[string]struct{}
	families        *int
	clearedfamilies bool
	done            bool
	oldValue        func(context.Context) (*Relative, error)
	predicates      []predicate.Relative
}

var _ ent.Mutation = (*RelativeMutation)(nil)

// relativeOption allows management of the mutation configuration using functional options.
type relativeOption func(*RelativeMutation)

// newRelativeMutation creates new mutation for the Relative entity.
func newRelativeMutation(c config, op Op, opts ...relativeOption) *RelativeMutation {
	m := &RelativeMutation{
		config:        c,
		op:            op,
		typ:           TypeRelative,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRelativeID sets the ID field of the mutation.
func withRelativeID(id int) relativeOption {
	return func(m *RelativeMutation) {
		var (
			err   error
			once  sync.Once
			value *Relative
		)
		m.oldValue = func(ctx context.Context) (*Relative, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Relative.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRelative sets the old Relative of the mutation.
func withRelative(node *Relative) relativeOption {
	return func(m *RelativeMutation) {
		m.oldValue = func(context.Context) (*Relative, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RelativeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RelativeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RelativeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RelativeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Relative.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *RelativeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RelativeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Relative entity.
// If the Relative object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RelativeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RelativeMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *RelativeMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *RelativeMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Relative entity.
// If the Relative object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RelativeMutation) OldDescription(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *RelativeMutation) ResetDescription() {
	m.description = nil
}

// SetAvatarResource sets the "avatar_resource" field.
func (m *RelativeMutation) SetAvatarResource(s string) {
	m.avatar_resource = &s
}

// AvatarResource returns the value of the "avatar_resource" field in the mutation.
func (m *RelativeMutation) AvatarResource() (r string, exists bool) {
	v := m.avatar_resource
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatarResource returns the old "avatar_resource" field's value of the Relative entity.
// If the Relative object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RelativeMutation) OldAvatarResource(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatarResource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatarResource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatarResource: %w", err)
	}
	return oldValue.AvatarResource, nil
}

// ResetAvatarResource resets all changes to the "avatar_resource" field.
func (m *RelativeMutation) ResetAvatarResource() {
	m.avatar_resource = nil
}

// SetFamiliesID sets the "families" edge to the Family entity by id.
func (m *RelativeMutation) SetFamiliesID(id int) {
	m.families = &id
}

// ClearFamilies clears the "families" edge to the Family entity.
func (m *RelativeMutation) ClearFamilies() {
	m.clearedfamilies = true
}

// FamiliesCleared reports if the "families" edge to the Family entity was cleared.
func (m *RelativeMutation) FamiliesCleared() bool {
	return m.clearedfamilies
}

// FamiliesID returns the "families" edge ID in the mutation.
func (m *RelativeMutation) FamiliesID() (id int, exists bool) {
	if m.families != nil {
		return *m.families, true
	}
	return
}

// FamiliesIDs returns the "families" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FamiliesID instead. It exists only for internal usage by the builders.
func (m *RelativeMutation) FamiliesIDs() (ids []int) {
	if id := m.families; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFamilies resets all changes to the "families" edge.
func (m *RelativeMutation) ResetFamilies() {
	m.families = nil
	m.clearedfamilies = false
}

// Where appends a list predicates to the RelativeMutation builder.
func (m *RelativeMutation) Where(ps ...predicate.Relative) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RelativeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Relative).
func (m *RelativeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RelativeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, relative.FieldName)
	}
	if m.description != nil {
		fields = append(fields, relative.FieldDescription)
	}
	if m.avatar_resource != nil {
		fields = append(fields, relative.FieldAvatarResource)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RelativeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case relative.FieldName:
		return m.Name()
	case relative.FieldDescription:
		return m.Description()
	case relative.FieldAvatarResource:
		return m.AvatarResource()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RelativeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case relative.FieldName:
		return m.OldName(ctx)
	case relative.FieldDescription:
		return m.OldDescription(ctx)
	case relative.FieldAvatarResource:
		return m.OldAvatarResource(ctx)
	}
	return nil, fmt.Errorf("unknown Relative field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RelativeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case relative.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case relative.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case relative.FieldAvatarResource:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatarResource(v)
		return nil
	}
	return fmt.Errorf("unknown Relative field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RelativeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RelativeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RelativeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Relative numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RelativeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RelativeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RelativeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Relative nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RelativeMutation) ResetField(name string) error {
	switch name {
	case relative.FieldName:
		m.ResetName()
		return nil
	case relative.FieldDescription:
		m.ResetDescription()
		return nil
	case relative.FieldAvatarResource:
		m.ResetAvatarResource()
		return nil
	}
	return fmt.Errorf("unknown Relative field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RelativeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.families != nil {
		edges = append(edges, relative.EdgeFamilies)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RelativeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case relative.EdgeFamilies:
		if id := m.families; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RelativeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RelativeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RelativeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedfamilies {
		edges = append(edges, relative.EdgeFamilies)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RelativeMutation) EdgeCleared(name string) bool {
	switch name {
	case relative.EdgeFamilies:
		return m.clearedfamilies
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RelativeMutation) ClearEdge(name string) error {
	switch name {
	case relative.EdgeFamilies:
		m.ClearFamilies()
		return nil
	}
	return fmt.Errorf("unknown Relative unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RelativeMutation) ResetEdge(name string) error {
	switch name {
	case relative.EdgeFamilies:
		m.ResetFamilies()
		return nil
	}
	return fmt.Errorf("unknown Relative edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op              Op
	typ             string
	id              *int
	login           *string
	password        *string
	comment         *string
	created_at      *time.Time
	clearedFields   map[string]struct{}
	families        map[int]struct{}
	removedfamilies map[int]struct{}
	clearedfamilies bool
	done            bool
	oldValue        func(context.Context) (*User, error)
	predicates      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLogin sets the "login" field.
func (m *UserMutation) SetLogin(s string) {
	m.login = &s
}

// Login returns the value of the "login" field in the mutation.
func (m *UserMutation) Login() (r string, exists bool) {
	v := m.login
	if v == nil {
		return
	}
	return *v, true
}

// OldLogin returns the old "login" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLogin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogin: %w", err)
	}
	return oldValue.Login, nil
}

// ResetLogin resets all changes to the "login" field.
func (m *UserMutation) ResetLogin() {
	m.login = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetComment sets the "comment" field.
func (m *UserMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *UserMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldComment(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ResetComment resets all changes to the "comment" field.
func (m *UserMutation) ResetComment() {
	m.comment = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddFamilyIDs adds the "families" edge to the Family entity by ids.
func (m *UserMutation) AddFamilyIDs(ids ...int) {
	if m.families == nil {
		m.families = make(map[int]struct{})
	}
	for i := range ids {
		m.families[ids[i]] = struct{}{}
	}
}

// ClearFamilies clears the "families" edge to the Family entity.
func (m *UserMutation) ClearFamilies() {
	m.clearedfamilies = true
}

// FamiliesCleared reports if the "families" edge to the Family entity was cleared.
func (m *UserMutation) FamiliesCleared() bool {
	return m.clearedfamilies
}

// RemoveFamilyIDs removes the "families" edge to the Family entity by IDs.
func (m *UserMutation) RemoveFamilyIDs(ids ...int) {
	if m.removedfamilies == nil {
		m.removedfamilies = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.families, ids[i])
		m.removedfamilies[ids[i]] = struct{}{}
	}
}

// RemovedFamilies returns the removed IDs of the "families" edge to the Family entity.
func (m *UserMutation) RemovedFamiliesIDs() (ids []int) {
	for id := range m.removedfamilies {
		ids = append(ids, id)
	}
	return
}

// FamiliesIDs returns the "families" edge IDs in the mutation.
func (m *UserMutation) FamiliesIDs() (ids []int) {
	for id := range m.families {
		ids = append(ids, id)
	}
	return
}

// ResetFamilies resets all changes to the "families" edge.
func (m *UserMutation) ResetFamilies() {
	m.families = nil
	m.clearedfamilies = false
	m.removedfamilies = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.login != nil {
		fields = append(fields, user.FieldLogin)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.comment != nil {
		fields = append(fields, user.FieldComment)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldLogin:
		return m.Login()
	case user.FieldPassword:
		return m.Password()
	case user.FieldComment:
		return m.Comment()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldLogin:
		return m.OldLogin(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldComment:
		return m.OldComment(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldLogin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogin(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldLogin:
		m.ResetLogin()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldComment:
		m.ResetComment()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.families != nil {
		edges = append(edges, user.EdgeFamilies)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFamilies:
		ids := make([]ent.Value, 0, len(m.families))
		for id := range m.families {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedfamilies != nil {
		edges = append(edges, user.EdgeFamilies)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFamilies:
		ids := make([]ent.Value, 0, len(m.removedfamilies))
		for id := range m.removedfamilies {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedfamilies {
		edges = append(edges, user.EdgeFamilies)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeFamilies:
		return m.clearedfamilies
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeFamilies:
		m.ResetFamilies()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
