// Code generated by ent, DO NOT EDIT.

package family

const (
	// Label holds the string label denoting the family type in the database.
	Label = "family"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSurname holds the string denoting the surname field in the database.
	FieldSurname = "surname"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLogoResource holds the string denoting the logo_resource field in the database.
	FieldLogoResource = "logo_resource"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeRelatives holds the string denoting the relatives edge name in mutations.
	EdgeRelatives = "relatives"
	// Table holds the table name of the family in the database.
	Table = "families"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "families"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_families"
	// RelativesTable is the table that holds the relatives relation/edge.
	RelativesTable = "relatives"
	// RelativesInverseTable is the table name for the Relative entity.
	// It exists in this package in order to avoid circular dependency with the "relative" package.
	RelativesInverseTable = "relatives"
	// RelativesColumn is the table column denoting the relatives relation/edge.
	RelativesColumn = "family_relatives"
)

// Columns holds all SQL columns for family fields.
var Columns = []string{
	FieldID,
	FieldSurname,
	FieldDescription,
	FieldLogoResource,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "families"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_families",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
